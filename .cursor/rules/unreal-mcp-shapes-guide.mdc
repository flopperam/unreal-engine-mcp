---
description: "Guide for creating colored shapes and physics objects in Unreal Engine using MCP tools"
alwaysApply: false
---
# Unreal MCP Shapes and Physics Objects Guide

## Key Lessons for Creating Colored Shapes and Physics Objects

### Critical Issues to Avoid
1. **Scale/Size Problems**: Always use the actual spawned actor name returned from `spawn_blueprint_actor` when setting scale.

2. **Blueprint Name Conflicts**: Blueprint names must be unique. If creation fails with "Blueprint already exists", use a more specific/unique name.

3. **Component Naming**: When setting material colors, use the exact component name that was created (e.g., "SphereMesh", "Mesh", etc.).

### Correct Workflow for Creating Colored Physics Objects

#### Method 1: Using spawn_physics_actor (Recommended for all shapes)
```python
# PROVEN WORKFLOW - Works perfectly for colored cubes/shapes
# 1. Spawn physics actor first
spawn_physics_actor(
    name="UniqueName",
    mesh_path="/Engine/BasicShapes/Cube.Cube",  # or Sphere.Sphere, etc.
    location=[x, y, z],
    simulate_physics=True,
    gravity_enabled=True,
    mass=1
)

# 2. Set color on the blueprint
set_mesh_material_color("UniqueName_BP", "Mesh", [r, g, b, 1.0])

# 3. Compile blueprint to apply changes
compile_blueprint("UniqueName_BP")

# 4. Fix scale if needed (spawned actors often have [0,0,0] scale)
set_actor_transform(actual_spawned_name, scale=[1, 1, 1])
```

#### Method 2: Manual Blueprint Creation (When other methods fail)
```python
# 1. Create unique blueprint
create_blueprint("UniqueName_BP", "Actor")

# 2. Add mesh component with scale
add_component_to_blueprint(
    "UniqueName_BP", 
    "StaticMeshComponent", 
    "SphereMesh",
    scale=[size, size, size]  # Set scale during component creation
)

# 3. Set mesh type
set_static_mesh_properties("UniqueName_BP", "SphereMesh", "/Engine/BasicShapes/Sphere.Sphere")

# 4. Enable physics
set_physics_properties("UniqueName_BP", "SphereMesh", simulate_physics=True, gravity_enabled=True)

# 5. Set color
set_mesh_material_color("UniqueName_BP", "SphereMesh", [r, g, b, 1.0])

# 6. Compile blueprint
compile_blueprint("UniqueName_BP")

# 7. Spawn actor
spawn_result = spawn_blueprint_actor("UniqueName_BP", "ActorName", [x, y, z])

# 8. IMPORTANT: Use actual spawned name for any subsequent operations
actual_name = spawn_result.get("result", {}).get("name", "ActorName")
```

### Color Format Standards
- **Red**: `[1, 0, 0, 1]`
- **Blue**: `[0, 0, 1, 1]`
- **Green**: `[0, 1, 0, 1]`
- **Purple**: `[0.5, 0, 1, 1]` (mix of red and blue)
- **Colors must be RGBA format with values between 0.0 and 1.0**

### Common Mesh Paths
- Sphere: `/Engine/BasicShapes/Sphere.Sphere`
- Cube: `/Engine/BasicShapes/Cube.Cube`
- Cylinder: `/Engine/BasicShapes/Cylinder.Cylinder`

### Physics Settings for Bouncy Objects
```python
set_physics_properties(
    blueprint_name, 
    component_name,
    simulate_physics=True,
    gravity_enabled=True,
    mass=1.0,
    linear_damping=0.1,    # Adds realistic bouncing
    angular_damping=0.1
)
```

### Troubleshooting
- If scale is [0,0,0] after spawning, the scale wasn't set properly during component creation or the wrong actor name was used
- If color doesn't appear, check component name matches exactly what was created
- Blueprint creation failures usually mean name conflicts - use more unique names
- Always capture the actual spawned actor name from spawn_result for subsequent operations